<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2009-2016 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.study.Mapper">

  <cache/>

<!--
使用二级缓存需要完成下面三步配置：
1.mybatis-config.xml中setting开启缓存：<setting name = "cacheEnabled" value = "true" />
2.mapper文件中使用<cache/>
3.相关的查询语句使用useCache="true"
另外，实体类还需要实现序列化接口
-->
  <select id="getUsersXml" resultType="com.example.study.User" useCache="true">
    select * from users
  </select>

<!--  上面getUsersXml使用的resultType其实内部也会转换成resultMap-->

<!--
resultMap标签包含一下标签：constructor,id,result,association,collection
ResultMap与resultMap标签为一对一关系，ResultMap与ResultMapping是一对多关系
自动映射生效条件：列名与属性名同时存在，当前列未设置手动映射，属性类别存在TypeHandler（即一些简单类型），开启autoMapping(默认自动开启)。
实际使用尽量不要使用自动映射。
-->
  <resultMap id="blogMap" type="com.example.study.Blog">
<!--    注意，这里需要手动指定id的映射规则，要不然自动映射不会生效，因为在下面的collection标签中我们使用了column="id"，此时mybatis认为collection标签就是id的映射关系，所以会导致id为空-->
    <id property="id" column="id"/>
<!--    result标签中的jdbcType，javaType等mybatis能自动推导，不用填写-->
    <result property="title" column="title"/>
<!--    包含单个复杂对象  property为bean属性名  column为当前表要传入getUserById方法的数据库字段-->
    <association property="mainAuthor" column="main_author_id" select="com.example.study.Mapper.getUserById" />
<!--    包含list的复杂对象-->
    <collection property="commentList" column="id" select="com.example.study.Mapper.getCommentByBlogId"/>
  </resultMap>

  <resultMap id="commentMap" type="com.example.study.Comment" autoMapping="true">
    <result property="blogId" column="blog_id"/>
<!--    这里评论关联的用户如果是博客的mainAuthor，则这里会使用缓存-->
    <association property="user" column="user_id" select="com.example.study.Mapper.getUserById" />
<!--    这里存在blog与comment嵌套循环依赖，注意comment中不能使用toString输出blog，要不然会报错，必须通过debug手动查看关联关系。这里同样会使用缓存。-->
    <association property="blog" column="blog_id" select="com.example.study.Mapper.getBlogById" />
  </resultMap>

  <select id="getBlogById" resultMap="blogMap">
    select * from blog where id = #{id}
  </select>

  <select id="getCommentByBlogId" resultMap="commentMap">
    select * from comment where blog_id = #{id}
  </select>

  <resultMap id="lazyBlogMap" type="com.example.study.Blog">
    <id property="id" column="id"/>
    <result property="title" column="title"/>
<!--    只有子查询才能使用懒加载-->
    <association property="mainAuthor" column="main_author_id" select="com.example.study.Mapper.getUserById" fetchType="lazy"/>
    <collection property="commentList" column="id" select="com.example.study.Mapper.getCommentByBlogId" fetchType="lazy"/>
  </resultMap>

  <select id="getLazyBlogById" resultMap="lazyBlogMap">
    select * from blog where id = #{id}
  </select>

<!--  关联查询
使用关联查询时不能使用自动装配，要不然映射是mybatis分不清哪个id是哪个对象的id，所以必须得把所有字段都写出来，并且需要区分-->
  <resultMap id="unionBlogMap" type="com.example.study.Blog">
    <id property="id" column="blog_id"/>
    <result property="title" column="title"/>
    <result property="publishDate" column="publish_date"/>
    <result property="body" column="body"/>
<!--    下面指定了关联的mainAuthor的resultMap。一对一映射。我们也能够不引入result，而在association中编写id、result等标签-->
<!--    notNullColumn:当查询出的user_name为空时，mainAuthor这个子属性将会置位空-->
    <association property="mainAuthor" resultMap="unionUserMap" notNullColumn="user_name"/>
<!--    一对多映射-->
    <collection property="commentList" resultMap="unionCommentMap"/>
  </resultMap>

  <resultMap id="unionUserMap" type="com.example.study.User">
    <id property="id" column="user_id"/>
    <result property="name" column="user_name"/>
  </resultMap>

  <resultMap id="unionCommentMap" type="com.example.study.Comment">
    <id property="id" column="comment_id"/>
    <result property="blogId" column="blog_id"/>
    <result property="comment" column="comment"/>
    <association property="user" resultMap="unionUserMap" />
    <association property="blog" resultMap="unionBlogMap" />
  </resultMap>

<!--  关联查询的sql需要自己手动编写。其实就是把所有字段都查询上来，mybatis只是负责将一行一行的字段映射到我们上面写的3个resultMap-->
  <select id="getUnionBlogById" resultMap="unionBlogMap">
    select blog.id as blog_id, blog.publish_date as publish_date, blog.title as title, blog.body as body, users.id as user_id, users.name as user_name,
           comment.id as comment_id, comment.comment
    from blog left join users on blog.main_author_id = users.id
    left join comment on blog.id = comment.blog_id
    where blog.id = #{id}
  </select>

<!--  下面的sql语句SqlNode树结构如下：
MixedSqlNode：StaticTextSqlNode、ForEachSqlNode（MixedSqlNode：StaticTextSqlNode）、StaticTextSqlNode
-->
  <select id="findByIds" resultType="com.example.study.User">
    select * from users
             where id in
             <foreach collection="list" open="(" close=")" separator="," item="item">
               #{item}
             </foreach>
  </select>

</mapper>
